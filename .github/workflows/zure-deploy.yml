name: üöÄ DevSecOps Pipeline - Node.js Azure Deployment

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  AZURE_WEBAPP_NAME: 'devsecops-05291918'
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  NODE_VERSION: '18.x'

jobs:
  # Job 1: Lint y Code Quality
  lint-and-quality:
    name: üîç Lint & Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check code formatting
        run: |
          if ! npm run lint -- --max-warnings 0; then
            echo "‚ùå ESLint found issues"
            exit 1
          else
            echo "‚úÖ Code quality checks passed"
          fi

  # Job 2: Security Scanning
  security-scan:
    name: üîí Security Analysis
    runs-on: ubuntu-latest
    needs: lint-and-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: |
          echo "üîç Running npm audit..."
          npm audit --audit-level moderate
        continue-on-error: true
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=upgradable
        continue-on-error: true
        
      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif
        continue-on-error: true

  # Job 3: Unit Testing
  test:
    name: üß™ Unit Testing
    runs-on: ubuntu-latest
    needs: lint-and-quality
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests with coverage
        run: npm test -- --coverage --watchAll=false
        
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true
        
      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            jest-results.xml

  # Job 4: SonarCloud Analysis
  sonarcloud:
    name: üìä SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [lint-and-quality, test]
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests for SonarCloud
        run: npm test -- --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter
        
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 5: Build and Container Security
  build-and-container-scan:
    name: üê≥ Build & Container Security
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --only=production
        
      - name: Build Docker image
        run: |
          docker build -t devsecops-uni-nodejs:${{ github.sha }} .
          docker build -t devsecops-uni-nodejs:latest .
          
      - name: Test Docker image
        run: |
          echo "üß™ Testing Docker image..."
          docker run -d --name test-container -p 3000:3000 devsecops-uni-nodejs:latest
          sleep 10
          
          # Test health endpoint
          if curl -f http://localhost:3000/health; then
            echo "‚úÖ Docker image health check passed"
          else
            echo "‚ùå Docker image health check failed"
            docker logs test-container
            exit 1
          fi
          
          docker stop test-container
          docker rm test-container
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'devsecops-uni-nodejs:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
        
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
        
      - name: Save Docker image
        run: |
          docker save devsecops-uni-nodejs:latest | gzip > devsecops-uni-nodejs.tar.gz
          
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: devsecops-uni-nodejs.tar.gz

  # Job 6: Deploy to Azure
  deploy:
    name: üöÄ Deploy to Azure
    runs-on: ubuntu-latest
    needs: [sonarcloud, build-and-container-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install production dependencies
        run: npm ci --only=production
        
      - name: Create deployment package
        run: |
          # Crear directorio de deployment
          mkdir -p deployment
          
          # Copiar archivos necesarios
          cp -r src deployment/
          cp package*.json deployment/
          cp -r node_modules deployment/
          
          # Crear web.config para Azure (opcional)
          cat > deployment/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="src/app.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^src/app.js\/debug[\/]?" />
                  </rule>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="src/app.js"/>
                  </rule>
                </rules>
              </rewrite>
              <security>
                <requestFiltering>
                  <hiddenSegments>
                    <remove segment="bin"/>
                  </hiddenSegments>
                </requestFiltering>
              </security>
              <httpErrors existingResponse="PassThrough" />
            </system.webServer>
          </configuration>
          EOF
          
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: deployment

  # Job 7: Post-Deployment Testing
  post-deploy-tests:
    name: ‚úÖ Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Wait for deployment stabilization
        run: sleep 60
        
      - name: Test application health
        run: |
          echo "üè• Testing application health..."
          
          # Test health endpoint
          health_response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health)
          if [ $health_response -eq 200 ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status: $health_response"
            exit 1
          fi
          
      - name: Test main application endpoint
        run: |
          echo "üåê Testing main application endpoint..."
          
          main_response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/)
          if [ $main_response -eq 200 ]; then
            echo "‚úÖ Main endpoint working correctly"
          else
            echo "‚ùå Main endpoint failed with status: $main_response"
            exit 1
          fi
          
      - name: Test API endpoints
        run: |
          echo "üîå Testing API endpoints..."
          
          api_info_response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/info)
          if [ $api_info_response -eq 200 ]; then
            echo "‚úÖ API info endpoint working"
          else
            echo "‚ùå API info endpoint failed with status: $api_info_response"
            exit 1
          fi
          
          api_security_response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/security)
          if [ $api_security_response -eq 200 ]; then
            echo "‚úÖ API security endpoint working"
          else
            echo "‚ùå API security endpoint failed with status: $api_security_response"
            exit 1
          fi
          
      - name: Test security headers
        run: |
          echo "üîí Testing security headers..."
          
          headers_output=$(curl -I -s https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/)
          
          if echo "$headers_output" | grep -q "x-content-type-options"; then
            echo "‚úÖ X-Content-Type-Options header present"
          else
            echo "‚ö†Ô∏è X-Content-Type-Options header missing"
          fi
          
          if echo "$headers_output" | grep -q "x-frame-options"; then
            echo "‚úÖ X-Frame-Options header present"
          else
            echo "‚ö†Ô∏è X-Frame-Options header missing"
          fi
          
      - name: Performance test
        run: |
          echo "‚ö° Running basic performance test..."
          
          start_time=$(date +%s%N)
          curl -s https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/ > /dev/null
          end_time=$(date +%s%N)
          
          response_time=$(( (end_time - start_time) / 1000000 ))
          echo "üìä Response time: ${response_time}ms"
          
          if [ $response_time -lt 5000 ]; then
            echo "‚úÖ Response time acceptable (<5s)"
          else
            echo "‚ö†Ô∏è Response time high (>5s)"
          fi
          
      - name: Notify deployment success
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üåç Application URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "üè• Health Check: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
          echo "üìö API Info: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/info"
          echo "üîí Security Status: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/security"
          
      - name: Create deployment summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Status**: Successful" >> $GITHUB_STEP_SUMMARY
          echo "üåç **URL**: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "üìÖ **Deployed**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "üîÑ **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Endpoints:" >> $GITHUB_STEP_SUMMARY
          echo "- [Main App](https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/)" >> $GITHUB_STEP_SUMMARY
          echo "- [Health Check](https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health)" >> $GITHUB_STEP_SUMMARY
          echo "- [API Info](https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/info)" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Status](https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/security)" >> $GITHUB_STEP_SUMMARY

  # Job 8: Cleanup and Notifications
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [post-deploy-tests]
    if: always()
    
    steps:
      - name: Clean up artifacts
        run: |
          echo "üßπ Cleaning up temporary files and artifacts..."
          
      - name: Generate deployment report
        if: github.ref == 'refs/heads/main'
        run: |
          echo "üìä Generating deployment report..."
          echo "Deployment completed at: $(date)"
          echo "Environment: Production"
          echo "Status: ${{ job.status }}"
